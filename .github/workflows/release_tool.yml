name: release
on:
  push:
    branches:
      - main
    paths:
      - 'src/WireMockInspector/**'
jobs:
  build-extension:
    runs-on: windows-latest
    env:
        DOTNET_NOLOGO: true
        DOTNET_CLI_TELEMETRY_OPTOUT: true
        RepositoryUrl: 'https://github.com/${{ github.repository }}'
        RepositoryBranch: '${{ github.ref }}'
        SourceRevisionId: '${{ github.sha }}'
        Configuration: Release
        SolutionPath: src\WireMockInspector.sln
        Deterministic: true
        PackageReleaseNotes: 'https://github.com/${{ github.repository }}/releases'
        ContinuousIntegrationBuild: true
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core 6
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0'
    - name: Calculate next version
      uses: cezarypiatek/NextVersionGeneratorAction@0.4
      with:
        version-tag-prefix: 'release/tool/v'
        patch-pattern: '.*'
        minor-pattern: '^(?!(Fix|Tech))/i'
        major-pattern: 'BREAKING CHANGES'
        output-to-env-variable: 'Version'
    # - name: Materialize Signing Key
    #   id: write_sign_key_file
    #   uses: timheuer/base64-to-file@v1
    #   with:
    #     fileName: 'Key.snk'
    #     encodedString: ${{ secrets.SIGNING_KEY }}
    - name: Restore dependencies
      run: |
        dotnet nuget locals all --clear
        dotnet restore $env:SolutionPath
    - name: Build extension
      run: dotnet build $env:SolutionPath
      # env:
      #   SignAssembly: true
      #   AssemblyOriginatorKeyFile: ${{ steps.write_sign_key_file.outputs.filePath }}
    - name: Generate release note
      run: |
        git fetch --prune
        $commitLog = git log "$(git describe --tags --abbrev=0)..HEAD" --pretty=format:"- %s"
        $commitLog = if([string]::IsNullOrWhitespace($commitLog)){git log --pretty=format:"- %s"}else{$commitLog}
        "What's new: `r`n`r`n$([string]::Join("`r`n",$commitLog))" | Out-File release_note.md -Encoding utf8
    - name: Create Github Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: 'release/tool/v${{ env.Version }}'
        release_name:  'Tool ${{ env.Version }}'
        body_path: release_note.md
        draft: false
        prerelease: false
    - name: Publish extension to Nuget
      run: |
        dotnet nuget push src\WireMockInspector\bin\Release\WireMockInspector.${{ env.Version }}.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json